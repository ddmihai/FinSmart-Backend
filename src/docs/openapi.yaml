openapi: 3.0.3
info:
  title: FinSmart API
  description: Your finances at your fingertips
  version: 0.1.0
servers:
  - url: http://localhost:4000
    description: Local dev
tags:
  - name: Auth
  - name: Accounts
  - name: Transactions
  - name: Statements
  - name: Budgets
  - name: Analytics
  - name: Cards
  - name: Transfers
  - name: Notifications
  - name: Security
paths:
  /health:
    get:
      summary: Health check
      tags: [Security]
      responses:
        '200':
          description: OK
  /api/security/csrf-token:
    get:
      summary: Get CSRF token (double-submit cookie)
      tags: [Security]
      responses:
        '200':
          description: Token
  /api/auth/signup:
    post:
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, name, password]
              properties:
                email: { type: string, format: email }
                name: { type: string }
                password: { type: string, minLength: 8 }
            examples:
              example:
                value:
                  email: user@example.com
                  name: Jane User
                  password: Password123!
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  user: { $ref: '#/components/schemas/User' }
        '409': { description: Email already used }
  /api/auth/login:
    post:
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        '200': { description: OK }
        '401': { description: Invalid credentials }
  /api/auth/logout:
    post:
      tags: [Auth]
      responses: { '200': { description: OK } }
  /api/auth/refresh:
    post:
      tags: [Auth]
      responses: { '200': { description: OK }, '401': { description: Invalid refresh token } }
  /api/auth/me:
    get:
      tags: [Auth]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK }, '401': { description: Unauthorized } }
  /api/accounts:
    get:
      tags: [Accounts]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Account' }
    post:
      tags: [Accounts]
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: string
                  enum: [Basic, Credit, Platinum, Gold]
            examples:
              example:
                value: { type: Platinum }
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Account' }
  /api/accounts/cards:
    get:
      tags: [Accounts]
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Card' }
  /api/accounts/{accountId}/replace-card:
    post:
      tags: [Accounts]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: accountId
          required: true
          schema: { type: string }
      responses: { '200': { description: OK }, '404': { description: Not found } }
  /api/transactions/income:
    post:
      tags: [Transactions]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [accountId, amount, name]
              properties:
                accountId: { type: string }
                amount: { type: integer, minimum: 1, description: Amount in pence }
                category: { type: string }
                name: { type: string }
                note: { type: string }
                recurring: { type: boolean }
                interval: { type: string, enum: [daily, weekly, monthly] }
      responses: { '201': { description: Created }, '404': { description: Account not found } }
  /api/transactions/expense:
    post:
      tags: [Transactions]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [accountId, amount, name]
              properties:
                accountId: { type: string }
                amount: { type: integer, minimum: 1 }
                category: { type: string }
                name: { type: string }
                note: { type: string }
      responses: { '201': { description: Created }, '404': { description: Account not found } }
  /api/transactions/deposit:
    post:
      tags: [Transactions]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [accountId, amount]
              properties:
                accountId: { type: string }
                amount: { type: integer, minimum: 1 }
                note: { type: string }
      responses: { '201': { description: Created }, '404': { description: Account not found } }
  /api/transactions/transfer:
    post:
      tags: [Transactions]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fromAccountId, toName, toSortCode, toAccountNumber, amount]
              properties:
                fromAccountId: { type: string }
                toName: { type: string }
                toSortCode: { type: string }
                toAccountNumber: { type: string }
                amount: { type: integer, minimum: 1 }
                note: { type: string }
      responses: { '201': { description: Created }, '404': { description: Source account not found } }
  /api/transactions:
    get:
      tags: [Transactions]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: accountId
          required: true
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: name
          schema: { type: string }
        - in: query
          name: q
          schema: { type: string }
        - in: query
          name: min
          schema: { type: integer }
        - in: query
          name: max
          schema: { type: integer }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Transaction' }
        '404': { description: Account not found }
  /api/statements:
    get:
      tags: [Statements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: accountId
          required: true
          schema: { type: string }
        - in: query
          name: from
          schema: { type: string, format: date-time }
        - in: query
          name: to
          schema: { type: string, format: date-time }
        - in: query
          name: name
          schema: { type: string }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema: { $ref: '#/components/schemas/StatementSummary' }
        '404': { description: Account not found }
  /api/statements/download:
    get:
      tags: [Statements]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: accountId
          required: true
          schema: { type: string }
      responses: { '200': { description: PDF stream }, '404': { description: Account not found } }
  /api/statements/share:
    post:
      tags: [Statements]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [accountId]
              properties:
                accountId: { type: string }
                ttlHours: { type: integer, minimum: 1, maximum: 720 }
                filters: { type: object }
      responses: { '201': { description: Share created } }
  /api/statements/shared/{token}:
    get:
      tags: [Statements]
      parameters:
        - in: path
          name: token
          required: true
          schema: { type: string }
      responses: { '200': { description: OK }, '404': { description: Invalid token } }
  /api/budgets:
    post:
      tags: [Budgets]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [category, limit]
              properties:
                category: { type: string }
                limit: { type: integer, minimum: 0 }
      responses: { '201': { description: Created } }
  /api/budgets/usage:
    get:
      tags: [Budgets]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
  /api/analytics:
    get:
      tags: [Analytics]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: accountId
          required: true
          schema: { type: string }
      responses: { '200': { description: OK }, '404': { description: Account not found } }
  /api/analytics/forecast:
    get:
      tags: [Analytics]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: accountId
          required: true
          schema: { type: string }
      responses:
        '200': { description: OK }
  /api/transfers/send:
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fromAccountId, toName, toSortCode, toAccountNumber, amount]
              properties:
                fromAccountId: { type: string }
                toName: { type: string }
                toSortCode: { type: string }
                toAccountNumber: { type: string }
                amount: { type: integer }
                reference: { type: string }
      responses:
        '201': { description: OK }
        '403': { description: Daily limit exceeded }
  /api/transfers/recurring:
    get:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fromAccountId, toName, toSortCode, toAccountNumber, amount, monthlyDay]
              properties:
                fromAccountId: { type: string }
                toName: { type: string }
                toSortCode: { type: string }
                toAccountNumber: { type: string }
                amount: { type: integer }
                monthlyDay: { type: integer, minimum: 1, maximum: 28 }
                reference: { type: string }
      responses: { '201': { description: Created } }
  /api/transfers/recurring/{id}/cancel:
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { '200': { description: OK } }
  /api/transfers/scheduled:
    get:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fromAccountId, toName, toSortCode, toAccountNumber, amount, runAt]
              properties:
                fromAccountId: { type: string }
                toName: { type: string }
                toSortCode: { type: string }
                toAccountNumber: { type: string }
                amount: { type: integer }
                runAt: { type: string, format: date-time }
                reference: { type: string }
      responses: { '201': { description: Created } }
  /api/transfers/scheduled/{id}/cancel:
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: string }
      responses: { '200': { description: OK } }
  /api/transfers/limit:
    get:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
    post:
      tags: [Transfers]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [dailyMax]
              properties:
                dailyMax: { type: integer }
      responses: { '200': { description: OK } }
  /api/cards/{cardId}/freeze:
    post:
      tags: [Cards]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: cardId
          required: true
          schema: { type: string }
      responses: { '200': { description: OK } }
  /api/cards/{cardId}/unfreeze:
    post:
      tags: [Cards]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: cardId
          required: true
          schema: { type: string }
      responses: { '200': { description: OK } }
  /api/cards/{cardId}/limits:
    post:
      tags: [Cards]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: cardId
          required: true
          schema: { type: string }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                dailyLimit: { type: integer }
                weeklyLimit: { type: integer }
      responses: { '200': { description: OK } }
  /api/cards/{cardId}/reveal:
    post:
      tags: [Cards]
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: cardId
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [password]
              properties:
                password: { type: string }
      responses: { '200': { description: OK } }
  /api/notifications:
    get:
      tags: [Notifications]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: OK } }
  /api/notifications/read:
    post:
      tags: [Notifications]
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ids]
              properties:
                ids: { type: array, items: { type: string } }
      responses: { '200': { description: OK } }
  /api/notifications/stream:
    get:
      tags: [Notifications]
      security: [{ bearerAuth: [] }]
      responses: { '200': { description: SSE stream } }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id: { type: string }
        email: { type: string, format: email }
        name: { type: string }
    Account:
      type: object
      properties:
        _id: { type: string }
        user: { type: string }
        type: { type: string, enum: [Basic, Credit, Platinum, Gold] }
        sortCode: { type: string, example: "12-34-56" }
        accountNumber: { type: string, example: "12345678" }
        balance: { type: integer, description: Amount in pence }
        createdAt: { type: string, format: date-time }
    Card:
      type: object
      properties:
        _id: { type: string }
        account: { type: string }
        number: { type: string }
        expiryMonth: { type: integer }
        expiryYear: { type: integer }
        active: { type: boolean }
    Transaction:
      type: object
      properties:
        _id: { type: string }
        account: { type: string }
        type: { type: string, enum: [income, expense, transfer-in, transfer-out, deposit] }
        amount: { type: integer, description: Amount in pence }
        category: { type: string }
        name: { type: string }
        note: { type: string }
        createdAt: { type: string, format: date-time }
    StatementSummary:
      type: object
      properties:
        txs:
          type: array
          items: { $ref: '#/components/schemas/Transaction' }
        income: { type: integer }
        expenses: { type: integer }
        byCategory:
          type: object
          additionalProperties: { type: integer }
    Budget:
      type: object
      properties:
        _id: { type: string }
        user: { type: string }
        category: { type: string }
        limit: { type: integer }
        createdAt: { type: string, format: date-time }
  parameters: {}
